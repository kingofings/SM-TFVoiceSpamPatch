"Games"
{
	"tf"
	{
		"Functions"
		{
			"CBaseMultiplayerPlayer::ShouldRunRateLimitedCommand(char*)"
			{
				"signature"	"CBaseMultiplayerPlayer::ShouldRunRateLimitedCommand(char*)"
				"callconv"	"thiscall"
				"this"		"entity"
				"return"	"bool"
				"arguments"
				{
					"command"
					{
						"type"	"charptr"
					}
				}
			}
		}
		"MemPatches"
		{
			// patches out the early return that happens when `IsSpeaking()` returns true
			"CTFPlayer::SpeakConceptIfAllowed()::BypassIsSpeaking"
			{
				"signature"		"CTFPlayer::SpeakConceptIfAllowed()"
				"linux"
				{
					"offset"	"26h"
					"verify"	"\x74\x2A"
					"patch"		"\xEB"
				}
				"windows"
				{
					"offset"	"40h"
					"verify"	"\x0F\x85\x2A\x2A\x2A\x2A"
					"patch"		"\x90\x90\x90\x90\x90\x90"
				}
			}
		}
		"Signatures"
		{
			"CBaseMultiplayerPlayer::ShouldRunRateLimitedCommand(char*)"
			{
				// contains unique byte sequence 'D9 55 08 D8 64 CA 14' on Windows
				"library"	"server"
				"linux"		"@_ZN22CBaseMultiplayerPlayer27ShouldRunRateLimitedCommandEPKc"
				"windows"	"\x55\x8B\xEC\x83\xEC\x10\x8B\x45\x08\x53\x8B\xD9"
			}
			"CTFPlayer::SpeakConceptIfAllowed()"
			{
				// unique string xref "disguiseclass:%s"
				"library"	"server"
				"linux"		"@_ZN9CTFPlayer21SpeakConceptIfAllowedEiPKcPcjP16IRecipientFilter"
				"windows"	"\x55\x8B\xEC\x81\xEC\xF4\x00\x00\x00\x53\x8B\xD9"
			}
		}
	}
}
